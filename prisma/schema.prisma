// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Specifies the database provider and connection URL.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Specifies the generator for Prisma Client.
generator client {
  provider = "prisma-client-js"
}

// Role enum for RBAC
enum Role {
  USER
  ADMIN
}

// Token types used for verification/password reset
enum TokenType {
  EMAIL_VERIFY
  PASSWORD_RESET
  REFRESH
}

// Defines the model for the 'Stock' table.
model Stock {
  id          Int      @id @default(autoincrement())
  symbol      String   @unique
  ticker      String
  close       Float
  description String
  sector      String?
  submarket   String?
  subtype     String
  type        String
  exchange    String
  country     String?
  currency    String
  industry    String?
}

// Users table for authentication and roles
model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  password        String
  name            String?
  isEmailVerified Boolean   @map("is_email_verified") @default(false)
  role            Role      @default(USER)
  createdAt       DateTime  @map("created_at") @default(now())
  updatedAt       DateTime  @map("updated_at") @updatedAt
  // relations
  refreshTokens   RefreshToken[]
  verificationTokens VerificationToken[]
}

// Refresh tokens (stored server-side so we can revoke)
model RefreshToken {
  id         Int       @id @default(autoincrement())
  tokenHash  String    @map("token_hash") @unique
  user       User      @relation(fields: [userId], references: [id])
  userId     Int       @map("user_id")
  createdAt  DateTime  @map("created_at") @default(now())
  expiresAt  DateTime  @map("expires_at")
  revoked    Boolean   @default(false)
  @@index([userId])
  @@index([expiresAt])
}

// One-time tokens for email verification & password reset
model VerificationToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  type      TokenType
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @map("user_id")
  createdAt DateTime  @map("created_at") @default(now())
  expiresAt DateTime  @map("expires_at")
  used      Boolean   @default(false)
  @@index([userId])
  @@index([expiresAt])
}
